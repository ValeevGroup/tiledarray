name: TiledArray CI

on: [push]

env:
  CMAKE_BUILD_PARALLEL_LEVEL : 2

jobs:

  MacOS-Build:

    strategy:
      fail-fast: false
      matrix:
        os : [ macos-latest, ubuntu-24.04 ]
        build_type : [ Release, Debug ]
        task_backend: [ Pthreads, PaRSEC ]
        include:
          - os: ubuntu-24.04
            cc: /usr/bin/gcc-14
            cxx: /usr/bin/g++-14
          - os: macos-latest
            cc: clang
            cxx: clang++

    name: "${{ matrix.os }}: ${{ matrix.cxx }} ${{ matrix.build_type }} ${{ matrix.task_backend }}"
    runs-on: ${{ matrix.os }}
    env:
      CXX : ${{ matrix.cxx }}
      CCACHE_DIR : ${{github.workspace}}/build/.ccache
      CCACHE_COMPRESS : true
      CCACHE_COMPRESSLEVEL : 6
      OMPI_MCA_btl_vader_single_copy_mechanism : none
      PARSEC_MCA_bind_threads : 0
      BUILD_CONFIG : >
        -DMADNESS_TASK_BACKEND=${{ matrix.task_backend }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DMPIEXEC_PREFLAGS='--bind-to;none;--allow-run-as-root'
        -DCMAKE_PREFIX_PATH="/usr/local/opt/bison;/usr/local/opt/scalapack;/usr/local/opt/boost"
        -DTA_ASSERT_POLICY=TA_ASSERT_THROW
        -DTA_SCALAPACK=ON

    steps:
    - uses: actions/checkout@v4

    - name: Host system info
      shell: bash
      run: cmake -P ${{github.workspace}}/ci/host_system_info.cmake


    - name: Install prerequisite MacOS packages
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        brew install ninja boost eigen open-mpi bison scalapack ccache
        echo "MPIEXEC=/opt/homebrew/bin/mpiexec" >> $GITHUB_ENV

    - name: Install prerequisites Ubuntu packages
      if: ${{ matrix.os == 'ubuntu-24.04' }}
      run: |
        wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
        sudo apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main"
        sudo apt-get update
        sudo apt-get -y install ninja-build g++-14 liblapack-dev libboost-dev libboost-serialization-dev libboost-random-dev libeigen3-dev openmpi-bin libopenmpi-dev libtbb-dev ccache flex bison libscalapack-mpi-dev cmake doxygen
        sudo ln -s /usr/lib/x86_64-linux-gnu/libscalapack-openmpi.so /usr/lib/x86_64-linux-gnu/libscalapack.so
        echo "MPIEXEC=/usr/bin/mpiexec" >> $GITHUB_ENV

    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("::set-output name=timestamp::${current_date}")
    - name: Setup ccache cache files
      uses: actions/cache@v4
      with:
        path: ${{github.workspace}}/build/.ccache
        key: ${{ matrix.config.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
          ${{ matrix.config.name }}-ccache-

    - name: "Configure build: ${{ env.BUILD_CONFIG }}"
      shell: bash
      run: |
        set -x;
        cmake -B${{github.workspace}}/build $BUILD_CONFIG || (cat CMakeFiles/CMakeConfigureLog.yaml)

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: |
        ccache -p && ccache -z && cmake --build . --target tiledarray ta_test examples && ccache -s

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      #run: ctest -C $${{matrix.build_type}}
      run: |
        source ${{github.workspace}}/ci/openmpi.env
        cmake --build . --target check-tiledarray
