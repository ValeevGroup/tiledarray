/* AUTOMATICALLY GENERATED */

/*
 *  This file is a part of TiledArray.
 *  Copyright (C) 2013  Virginia Tech
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef TILEDARRAY_UNIT_TEST_CONFIG_H__INCLUDED
#define TILEDARRAY_UNIT_TEST_CONFIG_H__INCLUDED

/* Defines the boost unit test framework linkage. */
#cmakedefine BOOST_TEST_DYN_LINK

#if defined(__GNUC__)
#pragma GCC diagnostic push
#pragma GCC system_header
#endif

#if (defined(BOOST_TEST_MAIN) || defined(BOOST_TEST_MODULE)) && !defined(BOOST_TEST_DYN_LINK)
#include <boost/test/included/unit_test.hpp>
#else
#include <boost/test/unit_test.hpp>
#endif


#if BOOST_VERSION >= 104000
# include <boost/test/unit_test.hpp>
#else
# include <boost/test/test_case_template.hpp>
#endif
#if BOOST_VERSION >= 105900
# include <boost/test/tools/output_test_stream.hpp>
#else
# include <boost/test/output_test_stream.hpp>
#endif
#include <boost/mpl/list.hpp>

#include "boost_test_print.h"

#if defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

#include "global_fixture.h"
#include "iteration_test.h"

#define TA_UT_LABEL_DISTRIBUTED  *boost::unit_test::label("distributed")
#define TA_UT_LABEL_SERIAL  *boost::unit_test::label("serial")

#if (TA_ASSERT_POLICY == TA_ASSERT_THROW)

#define BOOST_WARN_TA_ASSERT( S, E ) \
    BOOST_WARN_THROW( S, E )
#define BOOST_CHECK_TA_ASSERT( S, E ) \
    BOOST_CHECK_THROW( S, E )
#define BOOST_REQUIRE_TA_ASSERT( S, E ) \
    BOOST_REQUIRE_THROW( S, E )

#else

#define BOOST_WARN_TA_ASSERT( S, E )  \
    BOOST_WARN_MESSAGE( false, "Skipped BOOST_WARN_TA_ASSERT(" BOOST_STRINGIZE(S) "," BOOST_STRINGIZE(E) ") due to TA_ASSERT_POLICY != TA_ASSERT_THROW" )
#define BOOST_CHECK_TA_ASSERT( S, E )  \
    BOOST_WARN_MESSAGE( false, "Skipped BOOST_CHECK_THROW(" BOOST_STRINGIZE(S) "," BOOST_STRINGIZE(E) ") due to TA_ASSERT_POLICY != TA_ASSERT_THROW" )
#define BOOST_REQUIRE_TA_ASSERT( S, E )  \
    BOOST_WARN_MESSAGE( false, "Skipped BOOST_REQUIRE_THROW(" BOOST_STRINGIZE(S) "," BOOST_STRINGIZE(E) ") due to TA_ASSERT_POLICY != TA_ASSERT_THROW" )

#endif

#endif // TILEDARRAY_CONFIG_H__INCLUDED
